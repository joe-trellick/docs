"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8968],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),p=o,h=d["".concat(i,".").concat(p)]||d[p]||m[p]||l;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},55064:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(67294),o=n(79443);var l=function(){var e=(0,a.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},r=n(86010),c="tabItem_1uMI",i="tabItemActive_2DSg";var s=37,u=39;var m=function(e){var t=e.lazy,n=e.block,o=e.defaultValue,m=e.values,d=e.groupId,p=e.className,h=l(),b=h.tabGroupChoices,k=h.setTabGroupChoices,g=(0,a.useState)(o),v=g[0],y=g[1],f=a.Children.toArray(e.children),T=[];if(null!=d){var w=b[d];null!=w&&w!==v&&m.some((function(e){return e.value===w}))&&y(w)}var I=function(e){var t=e.currentTarget,n=T.indexOf(t),a=m[n].value;y(a),null!=d&&(k(d,a),setTimeout((function(){var e,n,a,o,l,r,c,s;(e=t.getBoundingClientRect(),n=e.top,a=e.left,o=e.bottom,l=e.right,r=window,c=r.innerHeight,s=r.innerWidth,n>=0&&l<=s&&o<=c&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i),setTimeout((function(){return t.classList.remove(i)}),2e3))}),150))},D=function(e){var t,n;switch(e.keyCode){case u:var a=T.indexOf(e.target)+1;n=T[a]||T[0];break;case s:var o=T.indexOf(e.target)-1;n=T[o]||T[T.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},p)},m.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,className:(0,r.Z)("tabs__item",c,{"tabs__item--active":v===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:D,onFocus:I,onClick:I},n)}))),t?(0,a.cloneElement)(f.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},39629:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return m},toc:function(){return d},default:function(){return h}});var a=n(87462),o=n(63366),l=(n(67294),n(3905)),r=n(55064),c=n(58215),i=["components"],s={sidebar_position:1},u="Data Model",m={unversionedId:"concepts/data-model",id:"concepts/data-model",isDocsHomePage:!1,title:"Data Model",description:"Ditto is a NoSQL database, that can store JSON-like Documents organized by Collections. However, unlike JSON, Ditto allows you to apply updates to the document which will be synchronized with any other copy on other devices. In addition, it supports additional data types.",source:"@site/docs/concepts/data-model.mdx",sourceDirName:"concepts",slug:"/concepts/data-model",permalink:"/concepts/data-model",editUrl:"https://github.com/getditto/docs/edit/master/website/docs/concepts/data-model.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Linux",permalink:"/installation/linux"},next:{title:"Insert, Update, and Remove",permalink:"/concepts/insert-update-remove"}},d=[{value:"Collections",id:"collections",children:[]},{value:"Documents",id:"documents",children:[]},{value:"Document <code>_id</code>, the Primary Key",id:"document-_id-the-primary-key",children:[]},{value:"Allowed Document Data Types",id:"allowed-document-data-types",children:[]},{value:"Binary Data - Attachments",id:"binary-data---attachments",children:[]},{value:"Counter Types",id:"counter-types",children:[]}],p={toc:d};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"data-model"},"Data Model"),(0,l.kt)("p",null,"Ditto is a NoSQL database, that can store JSON-like Documents organized by Collections. However, unlike JSON, Ditto allows you to apply updates to the document which will be synchronized with any other copy on other devices. In addition, it supports additional data types."),(0,l.kt)("h2",{id:"collections"},"Collections"),(0,l.kt)("p",null,'You can think of collections as a table in a traditional database. However, unlike traditional SQL databases, Ditto\'s collections are far simpler and more flexible. A collection merely referenced by its string value, there is no need to "create" a collection. While it is typically common for all documents in a collection to have the same structure, it is not a technical requirement. For example, all documents referencing cars can go in the "cars" collection and boat documents in the "boats" collection. You can create any number of collections that best represent your data model.'),(0,l.kt)("p",null,"To get a reference to a collection:"),(0,l.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'let carsCollection = ditto.store.collection("cars")\n'))),(0,l.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'let carsCollection = ditto.store["cars"]\n// or\nlet carsCollection = ditto.store.collection("cars")\n\n'))),(0,l.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objc"},'DITCollection *carsCollection  = [ditto.store collection:@"cars"];\n'))),(0,l.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val carsCollection = ditto.store["cars"]\n// or\nval carsCollection = ditto.store.collection("cars")\n'))),(0,l.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'DittoCollection carsCollection = ditto.store.collection("cars");\n'))),(0,l.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'var carsCollection = ditto.Store.Collection("cars");\n'))),(0,l.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'Collection cars_collection = ditto.store.collection("cars");\n')))),(0,l.kt)("h2",{id:"documents"},"Documents"),(0,l.kt)("p",null,"A Ditto document is a schema flexible unit of data in Ditto. If collections are similar to tables, then a document is similar to a row. A document, at its highest level, is a map that can contain arbitrarily nested keys and values. Each document has a primary key, often referred to as an id."),(0,l.kt)("h2",{id:"document-_id-the-primary-key"},"Document ",(0,l.kt)("inlineCode",{parentName:"h2"},"_id"),", the Primary Key"),(0,l.kt)("p",null,"In order for documents to sync, each document must have a unique identifier which we refer to as the id. This is the primary key of the document and is not optional."),(0,l.kt)("p",null,"You can supply your own unique identifier when creating a document:"),(0,l.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'let docId = ditto.store.collection("people").insert({\n    "_id": "123abc",\n    "name": "Susan",\n    "age": 31\n})\nconsole.log(docId) // "123abc"\n'))),(0,l.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'let docId = ditto.store["people"].insert([\n    "_id": "123abc"\n    "name": "Susan",\n    "age": 31\n])\nprint(docId) // "123abc"\n'))),(0,l.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objc"},'NSString *docId = [[ditto.store collection:@"people"]\n                    insert:@{ @"_id": @"123abc" @"name": @"Susan", @"age": @31 }\n                    isDefault:false\n                    error:nil];\nNSLog(@"%@", docId); // => "123abc"\n'))),(0,l.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docId = ditto.store["people"].insert(\n    mapOf(\n        "_id" to "123abc"\n        "name" to "Susan",\n        "age" to 31\n    )\n)\ndocId // => "123abc"\n\n'))),(0,l.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("_id", "123abc");\ncontent.put("name", "Susan");\ncontent.put("age", 31);\nDittoDocumentID docId = ditto.store.collection("people").insert(content);\nLog.d("Debug", docId); // => 123abc\n'))),(0,l.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'// Insert JSON-compatible data into Ditto\nvar content = new Dictionary<string, object>\n{\n    { "_id", "123abc" },\n    { "name", "Susan" },\n    { "age", 31 }\n};\nditto.Store.Collection("people").Insert(content);\ndocId; // => "123abc"\n'))),(0,l.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'json person = json({\n    { "_id", "123abc" },\n    {"name", "Susan"},\n    {"age", 31}\n});\nDocumentId doc_id = ditto.store\n                         .collection("people")\n                         .insert(person);\n')))),(0,l.kt)("p",null,"The id parameter is optional during insertion. If you do not supply a document ",(0,l.kt)("inlineCode",{parentName:"p"},"_id"),", Ditto will automatically generate a random, unique string and use that as the document's ",(0,l.kt)("inlineCode",{parentName:"p"},"_id")," instead."),(0,l.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'let docId = ditto.store.collection("people").insert({\n    "name": "Susan",\n    "age": 31\n})\nconsole.log(docId) // "507f191e810c19729de860ea"\n'))),(0,l.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'let docId = ditto.store["people"].insert([\n    "name": "Susan",\n    "age": 31\n])\nprint(docId) // "507f191e810c19729de860ea"\n'))),(0,l.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objc"},'NSString *docId = [[ditto.store collection:@"people"]\n                    insert:@{ @"name": @"Susan", @"age": @31 }\n                    isDefault:false\n                    error:nil];\nNSLog(@"%@", docId); // => "507f191e810c19729de860ea"\n'))),(0,l.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docId = ditto.store["people"].insert(\n    mapOf(\n        "name" to "Susan",\n        "age" to 31\n    )\n)\ndocId // => "507f191e810c19729de860ea"\n\n'))),(0,l.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("name", "Susan");\ncontent.put("age", 31);\nDittoDocumentID docId = ditto.store.collection("people").insert(content);\nLog.d("Debug", docId); // => 507f191e810c19729de860ea\n'))),(0,l.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'// Insert JSON-compatible data into Ditto\nvar content = new Dictionary<string, object>\n{\n    { "name", "Susan" },\n    { "age", 31 }\n};\nditto.Store.Collection("people").Insert(content);\ndocId; // => "123abc"\n'))),(0,l.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'json person = json({\n    {"name", "Susan"},\n    {"age", 31}\n});\nDocumentId doc_id = ditto.store\n                         .collection("people")\n                         .insert(person);\n')))),(0,l.kt)("h2",{id:"allowed-document-data-types"},"Allowed Document Data Types"),(0,l.kt)("p",null,"Like JSON, Ditto only supports strings as keys in documents. That means attempting to insert a document like the following will throw an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n    1: "numeric_keys_are_invalid",\n    "this_part": "is_valid_though"\n}\n')),(0,l.kt)("p",null,"Document values support all JSON compatible values like ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," and arrays or nested maps. In addition, document values can also support special types like binary or counter types. These special types will be discussed below."),(0,l.kt)("table",null,(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Data Type"),(0,l.kt)("th",null,"Allowed Values")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"Boolean"),(0,l.kt)("td",null,(0,l.kt)("p",null,(0,l.kt)("code",null,"false")," or ",(0,l.kt)("code",null,"true")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"String"),(0,l.kt)("td",null,"A utf-8 encodable string value")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"Number"),(0,l.kt)("td",null,"A 64-bit floating point value.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"Array"),(0,l.kt)("td",null,"Arrays are an ordered list of values. Arrays can contain all primitive values as well as nested collection types like other Arrays or Maps")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"Maps (sometimes referred to as dictionary)"),(0,l.kt)("td",null,"This represents a nested object within the overall document. Comparing values at the map level for equality first checks that each key and each value match.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("p",null,(0,l.kt)("code",null,"null"))),(0,l.kt)("td",null,"This represents an absence of value")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("p",null,"Binary")),(0,l.kt)("td",null,(0,l.kt)("p",null,"A byte string of binary data. Can be used to store images, files etc... We highly recommend keeping the size of the binary to be as small as possible so that syncing stays fast. We highly recommend that you use the ",(0,l.kt)("code",null,"Attachment")," type for most use cases."))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("p",null,"Attachment")),(0,l.kt)("td",null,(0,l.kt)("p",null,"A file to sync. This is different from the ",(0,l.kt)("code",null,"Binary")," type where it is meant to hold larger payloads of data. This is best use for multimedia data like images, sounds, pdfs etc..."))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("p",null,"Counter")),(0,l.kt)("td",null,(0,l.kt)("p",null,"A special 64 bit floating point value that has the ability to be incremented and decremented. This is highly valuable for building applications like an inventory application where multiple devices need to concurrently increment or decrement values."))))),(0,l.kt)("p",null,"The following snippets show a various set of data types"),(0,l.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// Insert JSON-compatible data into Ditto\nawait ditto.store.collection(\'foo\').insert({\n    value: {\n        "boolean": true,\n        "string": "Hello World",\n        "number": 10,\n        "map": { "key": "value" },\n        "array": [1, 2, 3],\n        "null": null\n    }\n})\n'))),(0,l.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'// Insert JSON-compatible data into Ditto\nditto.store["foo"].insert([\n    "boolean": true,\n    "string": "Hello World",\n    "number": 10,\n    "map": ["key": "value"],\n    "array": [1,2,3],\n    "null": nil\n])\n'))),(0,l.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objc"},'// Insert JSON-compatible data into Ditto\n[[ditto.store collection:@"foo"]\n  insert:@{\n      @"boolean": @true,\n      @"string": @"Hello World",\n      @"number": @10,\n      @"map": @{ @"key": @"value" },\n      @"array": @[ @1, @2, @3 ],\n      @"null": [NSNull null]\n  }\n  isDefault:false\n  error:nil];\n'))),(0,l.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.store["foo"].insert(mapOf(\n    "boolean" to true,\n    "string" to "Hello World",\n    "number" to 10,\n    "map" to mapOf("key" to "value"),\n    "array" to listOf(1,2,3),\n    "null" to null\n))\n'))),(0,l.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'// Insert JSON-compatible data into Ditto\nMap<String, Object> content = new HashMap<>();\ncontent.put("boolean", true);\ncontent.put("string", "Hello World");\ncontent.put("number", 10);\nMap<String, String> innerMap = new HashMap<>();\ninnerMap.put("key", "value");\ncontent.put("map", innerMap);\ncontent.put("array", Arrays.asList(1, 2, 3));\ncontent.put("null", null);\nditto.store.collection("foo").insert(content);\n'))),(0,l.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'// Insert JSON-compatible data into Ditto\nvar content = new Dictionary<string, object>\n{\n    { "boolean", true },\n    { "string", "Hello World" },\n    { "number", 10 },\n    { "map", new Dictionary<string, string>{{ "key", "value"}} },\n    { "array", new int[] {1, 2, 3} },\n    { "null", null }\n};\nditto.Store.Collection("foo").Insert(content);\n'))),(0,l.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'// Insert JSON-compatible data into Ditto\nditto.store.collection("foo").insert({\n    {"boolean", true},\n    {"string", "Hello World"},\n    {"number", 10},\n    {"map", {{"key", "value"}}},\n    {"array", {1,2,3}},\n    {"null", null}\n});\n')))),(0,l.kt)("h2",{id:"binary-data---attachments"},"Binary Data - Attachments"),(0,l.kt)("p",null,"If you have a large amount of binary data, or perhaps just a large file, that you want to sync between devices then instead of inserting this into a document as bytes you should make use of the attachments feature."),(0,l.kt)("p",null,"Attachments do not get synced between devices by default, even if they are part of a document that is being synced between devices. This is because they could be very large files that a given device doesn't need. Instead an attachment must be explicitly fetched using an attachment token that will be present in the document that the attachment is linked to."),(0,l.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// This feature is coming soon\n"))),(0,l.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'let collection = ditto.store["foo"]\n\nlet myImageURL = bundle.url(forResource: "image", withExtension: "png")!\n\nlet metadata = ["name": "my_image.png"]\nlet attachment = collection.newAttachment(\n    path: myImageURL.path,\n    metadata: metadata\n)!\n\ntry! collection.insert(["some": "string", "my_attachment": attachment])\n\n// Later, find the document and the fetch the attachment\n\nlet doc = collection.findByID(docID).exec()\nlet attachmentToken = doc!["my_attachment"].attachmentToken!\n\nlet fetcher = collection.fetchAttachment(token: attachmentToken) { status in\n    switch status {\n    case .completed(let fetchedAttachment):\n        // Do something with attachment\n        break\n    default:\n        print("Unable to fetch attachment")\n        break\n    }\n}\n'))),(0,l.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objc"},'NSURL *myImageURL = [bundle URLForResource:@"image" withExtension:@"png"];\n\nNSDictionary<NSString *, NSString *> *metadata = @{@"name": @"my_image.png"};\nDITAttachment *attachment = [collection newAttachment:myImageURL.path\n                                             metadata:metadata];\n\n[collection insert:@{@"some": @"string", @"my_attachment": attachment} error:nil];\n\n// Later, find the document and the fetch the attachment\n\nDITDocument *doc = [[collection findByID:docID] exec];\nDITAttachmentToken *attachmentToken = doc[@"my_attachment"].attachmentToken;\n\nDITAttachmentFetcher *fetcher = [collection fetchAttachment:attachmentToken\n                                            onStatusChanged:^(DITAttachmentStatus *status) {\n    switch (status.type) {\n        case DITAttachmentStatusTypeCompleted: {\n            DITAttachment *fetchedAttachment = completed.attachment;\n            // Do something with attachment\n            break;\n        }\n        default:\n            NSLog(@"Unable to fetch attachment")\n            break;\n    }\n}];\n'))),(0,l.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val attachmentStream =  context.assets.open("image.png")\n\nval metadata = mapOf("name" to "my_image.png")\nval attachment = coll.newAttachment(attachmentStream, metadata)\n\nval docID =  coll.insert(mapOf("some" to "string", "my_attachment" to attachment))\n\n// Later, find the document and the fetch the attachment\n\nval doc = coll.findByID(docID).exec()\nval attachmentToken = doc!!["my_attachment"].attachmentToken\n\nval fetcher =  coll.fetchAttachment(attachmentToken!!) {\n    when (it) {\n        is Completed -> {\n            let fetchedAttachment = it.attachment\n            // Do something with attachment\n        }\n        else -> println("Unable to fetch attachment")\n    }\n}\n'))),(0,l.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'InputStream attachmentStream = context.getAssets().open("image.png");\n\nMap<String, String> metadata = new HashMap<>();\nmetadata.put("name", "my_image.png");\nDittoAttachment attachment = coll.newAttachment(attachmentStream, metadata);\n\nMap<String, Object> content = new HashMap<>();\ncontent.put("some", "string");\ncontent.put("my_attachment", attachment);\nDittoDocumentID docID = coll.insert(content);\n\n// Later, find the document and the fetch the attachment\n\nDittoDocument doc = coll.findByID(docID).exec();\nDittoAttachmentToken attachmentToken = doc.get("my_attachment").getAttachmentToken();\n\nclass AttachmentStatusHandler implements DittoAttachmentStatusChangeHandler {\n\n    @Override\n    public void onStatusChanged(@NotNull DittoAttachmentStatus status) {\n        if (status instanceof DittoAttachmentStatus.Completed) {\n            DittoAttachment att = ((DittoAttachmentStatus.Completed) status).getAttachment();\n            // Do something with attachment\n        } else {\n            System.out.println("Unable to fetch attachment");\n        }\n    }\n}\n\nAttachmentStatusHandler attachmentStatusHandler = new AttachmentStatusHandler();\nDittoAttachmentFetcher fetcher = coll.fetchAttachment(attachmentToken, attachmentStatusHandler);\n'))),(0,l.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'var coll = ditto.Store.Collection("people");\nvar path = "path/to/image.png";\nvar metadata = new Dictionary<string, string> { { "name", "my_image.png" } };\nvar attachment = coll.NewAttachment(path, metadata);\nvar docID = coll.Insert(new Dictionary<string, object> { { "some", "string" }, { "my_attachment", attachment } });\n\n// Later, find the document and the fetch the attachment\n\nDittoDocument doc = coll.FindById(docID).Exec();\nDittoAttachmentToken attachmentToken = doc["my_attachment"].AttachmentToken;\nvar fetcher = carsCollection.FetchAttachment(token: attachmentToken, (status) =>\n{\n    if (status is DittoAttachmentFetchEvent.Completed)\n    {\n        // Do something with attachment\n    }\n    else\n    {\n        Console.WriteLine($"Unable to fetch attachment");\n    }\n});\n\n'))),(0,l.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string attachment_file_path = std::filesystem::path(\n    std::filesystem::current_path() + "/image.png").string();\nstd::map<std::string, std::string> metadata = {{"some", "string"}};\nAttachment attachment =\n    collection.new_attachment(attachment_file_path, metadata);\n\ncollection.insert({{"some", "string"}, {"my_attachment", attachment}});\n\n// Later, find the document and the fetch the attachment\n\nstd::shared_ptr<Document> doc = collection.find_by_id(doc_id).exec();\n\nstd::shared_ptr<AttachmentToken> att_token =\n    (*doc)["my_attachment"].get_attachment_token();\n\nstd::unique_ptr<AttachmentFetcher> fetcher = collection.fetch_attachment(\n    att_token,\n    AttachmentFetcherEventHandler{\n        [&](std::unique_ptr<AttachmentStatus> status) {\n        switch (status->type) {\n        case AttachmentStatusType::Completed: {\n            AttachmentStatusCompleted *completed_status =\n                static_cast<AttachmentStatusCompleted *>(status.get());\n            Attachment fetched_attachment = completed_status->attachment;\n            // Do something with attachment\n            break;\n        }\n        default:\n            std::cout << "Unable to fetch attachment" << std::endl;\n        }\n        }});\n')))),(0,l.kt)("h2",{id:"counter-types"},"Counter Types"),(0,l.kt)("p",null,"Counter is a very special type that is specific to Ditto. While they look like the number type, they are geared towards building applications where various different devices need to increment or decrement at the same time while preserving consistency. The most common use is to build a voting system or an inventory application. Building applications that needs a consistent count with only using the default number type will not be appropriate. This is where the counter comes in."),(0,l.kt)("p",null,"Counters can be edited through a special method called increment which takes a number to increment the counter by. If you wish to decrement the counter then you can supply a negative number."),(0,l.kt)("p",null,"To create a counter, first insert a document with number value. You must then call an update function to convert the number into a counter with the replaceWithCounter method. This will convert the number into a counter."),(0,l.kt)("p",null,"Once the value in the document is a counter, you can proceed to increment or decrement the value. This will preserve an accurate value once devices sync."),(0,l.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// This feature is not yet supported for JavaScript\n"))),(0,l.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'let docId = ditto.store["people"].insert([\n    "name": "Frank",\n    "ownedCars": 0 // here 0 is a number\n])\n\nditto.store.["people"].findByID(docId).update({ mutableDoc in\n    mutableDoc?["ownedCars"].replaceWithCounter()\n    mutableDoc?["ownedCars"].increment(amount: 1)\n})\n'))),(0,l.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-objc"},'NSString *docId = [[ditto.store collection:@"people"]\n                    insert:@{ @"model": @"Frank", @"ownedCars": @0 }\n                    isDefault:false\n                    error:nil];\n\n[[[ditto.store collection:@"people"] findByID:docId] update:^(DITMutableDocument * mutableDoc) {\n    [mutableDoc[@"ownedCars"] replaceWithCounterAndReturnError:nil];\n    [mutableDoc[@"ownedCars"] incrementWithAmount:1 error:nil];\n}];\n'))),(0,l.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docID = ditto.store["people"].insert(mapOf(\n    "name" to "Frank",\n    "ownedCars" to 0\n))\n\nditto.store.collection("people").findByID(docID).update { mutableDoc ->\n    mutableDoc["ownedCars"].replaceWithCounter()\n    mutableDoc["ownedCars"].increment(1)\n}\n'))),(0,l.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("name", "Frank");\ncontent.put("ownedCars", 0);\nDittoDocumentID docID = ditto.store.collection("people").insert(content);\n\nditto.store.collection("people").findByID(docID).update(mutDoc -> {\n    try {\n        mutDoc.get("ownedCars").replaceWithCounter();\n        mutDoc.get("ownedCars").increment(1);\n    } catch (DittoError err) {\n        // Do something with error\n    }\n});\n'))),(0,l.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'var content = new Dictionary<string, object>\n{\n    { "name", "Frank" },\n    { "ownedCars", 0 }\n};\nditto.Store.Collection("people").Insert(content);\nditto.Store.Collection("people").FindById(docId).Update((mutableDoc) => {\n    mutableDoc["ownedCars"].ReplaceWithCounter();\n    mutableDoc["ownedCars"].Increment(1);\n});\n'))),(0,l.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'DocumentId docID = ditto.store.collection("people").insert({\n    {"name", "Frank"},\n    {"ownedCars", 0}\n};\n\nditto.store\n     .collection("people")\n     .find_by_id(docID)\n     .update([](MutableDocument &doc) {\n         doc["ownedCars"].replace_with_counter();\n         doc["ownedCars"].increment(1);\n     };\n')))))}h.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:function(){return o}})}}]);