"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5810],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,v=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(v,i(i({ref:t},u),{},{components:n})):a.createElement(v,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},55064:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(67294),r=n(79443);var o=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=n(86010),l="tabItem_1uMI",c="tabItemActive_2DSg";var s=37,u=39;var p=function(e){var t=e.lazy,n=e.block,r=e.defaultValue,p=e.values,d=e.groupId,m=e.className,v=o(),y=v.tabGroupChoices,b=v.setTabGroupChoices,g=(0,a.useState)(r),k=g[0],f=g[1],h=a.Children.toArray(e.children),N=[];if(null!=d){var T=y[d];null!=T&&T!==k&&p.some((function(e){return e.value===T}))&&f(T)}var w=function(e){var t=e.currentTarget,n=N.indexOf(t),a=p[n].value;f(a),null!=d&&(b(d,a),setTimeout((function(){var e,n,a,r,o,i,l,s;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,o=e.right,i=window,l=i.innerHeight,s=i.innerWidth,n>=0&&o<=s&&r<=l&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(c),setTimeout((function(){return t.classList.remove(c)}),2e3))}),150))},C=function(e){var t,n;switch(e.keyCode){case u:var a=N.indexOf(e.target)+1;n=N[a]||N[0];break;case s:var r=N.indexOf(e.target)-1;n=N[r]||N[N.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},m)},p.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,className:(0,i.Z)("tabs__item",l,{"tabs__item--active":k===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:C,onFocus:w,onClick:w},n)}))),t?(0,a.cloneElement)(h.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==k})}))))}},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},13901:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return v}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=n(55064),l=n(58215),c=["components"],s={title:"Syncing Data (Live Queries)",sidebar_position:4},u=void 0,p={unversionedId:"concepts/syncing-data",id:"concepts/syncing-data",isDocsHomePage:!1,title:"Syncing Data (Live Queries)",description:"Enabling Sync",source:"@site/docs/concepts/syncing-data.md",sourceDirName:"concepts",slug:"/concepts/syncing-data",permalink:"/concepts/syncing-data",editUrl:"https://github.com/getditto/docs/edit/master/docs/concepts/syncing-data.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Syncing Data (Live Queries)",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Querying",permalink:"/concepts/querying"},next:{title:"Intro - Tasks App Tutorial",permalink:"/tutorials/tasks/index"}},d=[{value:"Enabling Sync",id:"enabling-sync",children:[]},{value:"Syncing Data with Live Queries",id:"syncing-data-with-live-queries",children:[]},{value:"Live Queries without Syncing Data",id:"live-queries-without-syncing-data",children:[]}],m={toc:d};function v(e){var t=e.components,n=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"enabling-sync"},"Enabling Sync"),(0,o.kt)("p",null,"To enable Ditto to sync data, you'll need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"ditto.tryStartSync()"),". Preferably, you should call ",(0,o.kt)("inlineCode",{parentName:"p"},"tryStartSync()")," early on in your application's life cycle like in your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate.application(_:didFinishLaunchingWithOptions:)")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Application.onCreate")," methods. Your application only needs to call this function once. "),(0,o.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ditto = new Ditto()\ntry {\n    ditto.tryStartSync()    \n} catch(err) {\n    console.error(err)   \n}\n"))),(0,o.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"let ditto = new Ditto()\ntry {\n    ditto.tryStartSync()    \n} catch(let err) {\n    print(err.localizedDescription)\n}\n"))),(0,o.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"NSError *error = nil;\n[ditto tryStartSync:&error];\n"))),(0,o.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'try {\n    ditto.tryStartSync()\n}\ncatch (e: DittoError) {\n    assertThat(e.message).isEqualTo("The license failed verification. Obtain a valid license token at https://portal.ditto.live.")\n}\n'))),(0,o.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'try {\n    ditto.tryStartSync();\n} catch(DittoError e) {\n    Log.e("Ditto", e.getMessage())\n}\n'))),(0,o.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"try\n{\n    ditto.TryStartSync();\n}\ncatch (DittoException ex)\n{\n    Console.WriteLine(exception.ToString());\n}\n"))),(0,o.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"try {\n    ditto.try_start_sync();\n} catch (const DittoError &err) {\n    // handle exception  \n} catch (const std::exception &e) {\n    std::cerr << e.what();\n}\n")))),(0,o.kt)("h2",{id:"syncing-data-with-live-queries"},"Syncing Data with Live Queries"),(0,o.kt)("p",null,"Ditto will only sync data with other peers when it has an active ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery"),". With Ditto, syncing a ",(0,o.kt)("em",{parentName:"p"},"pull")," mechanism. Your app will sync by subscribing to a query, this is what we call a ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery"),". A ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery")," is a long-running subscription to a constructed Ditto query. Use a query to specify what types of data to sync with other devices. ",(0,o.kt)("a",{parentName:"p",href:"./querying"},"Learn more about how to create queries")),(0,o.kt)("p",null,"To create a ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery"),", simply add ",(0,o.kt)("inlineCode",{parentName:"p"},".observe")," to a query cursor like so:"),(0,o.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const liveQuery = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .observe((cars, event) => {\n        // do something\n    })\n"))),(0,o.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// Register live query to update UI\nlet liveQuery = ditto.store.collection("cars").find("color == \'red\'")\n  .observe { cars, event in\n    // do something\n  }\n'))),(0,o.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"// Register live query to update UI\nDITLiveQuery *liveQuery = [[collection find:@\"color == 'red'\"]\n    observe:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\n\n    }\n}];\n"))),(0,o.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars").\n    .findAll()\n    .observe { docs, event ->\n        // Do something...\n    }\n'))),(0,o.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars")\n    .findAll()\n    .observe((docs, event) -> {\n        // Do something...\n    });\n'))),(0,o.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// --- Register live query to update UI\nvar liveQuery = ditto.Store.Collection("cars").Find("color == \'red\'").Observe((docs, DittoLiveQueryEvent) =>\n{\n    // Do something...\n});\n'))),(0,o.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"std::shared_ptr<LiveQuery> query = collection\n  .find(\"color == 'red'\")\n  .observe(LiveQueryEventHandler{\n    [&](std::vector<Document> docs, LiveQueryEvent event) {\n      // do something\n    }});\n")))),(0,o.kt)("p",null,"Here are some quick facts about the ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery")," behavior."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},".observe")," handler will always fire ",(0,o.kt)("em",{parentName:"li"},"immediately")," with the current set of documents matching the query."),(0,o.kt)("li",{parentName:"ul"},"Subsequent local and remote calls to ",(0,o.kt)("inlineCode",{parentName:"li"},".observe")," will be fired with the new set of documents that match the query. "),(0,o.kt)("li",{parentName:"ul"},"To stop the observe callback, either call ",(0,o.kt)("inlineCode",{parentName:"li"},"liveQuery.stop()")," or deallocate the ",(0,o.kt)("inlineCode",{parentName:"li"},"liveQuery")," object. Deallocation can by done simply by assigning it to ",(0,o.kt)("inlineCode",{parentName:"li"},"nil")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"null")," depending on the language and platform."),(0,o.kt)("li",{parentName:"ul"},"You can create as many ",(0,o.kt)("inlineCode",{parentName:"li"},"LiveQuery")," objects as you want."),(0,o.kt)("li",{parentName:"ul"},"Calling ",(0,o.kt)("inlineCode",{parentName:"li"},".observe")," on a query before calling ",(0,o.kt)("inlineCode",{parentName:"li"},"ditto.tryStartSync()"),", will only fire changes for local updates.")),(0,o.kt)("h2",{id:"live-queries-without-syncing-data"},"Live Queries without Syncing Data"),(0,o.kt)("p",null,"There are many situations where your app needs to observe live queries ",(0,o.kt)("em",{parentName:"p"},"without")," initiating syncing with other devices. For example, this is useful if your app intends to treat certain documents and collections as local-only data. Instead of ",(0,o.kt)("inlineCode",{parentName:"p"},".observe"),", call ",(0,o.kt)("inlineCode",{parentName:"p"},".observeLocal")," like so:"),(0,o.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const liveQuery = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .observeLocal((cars, event) => {\n        // do something\n    })\n"))),(0,o.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// --- Action somewhere in your application\nfunc userDidInsertCar() {\n    _ = ditto.store.collection("cars").insert([\n        "model": "Ford",\n        "color": "black"\n    ])\n}\n\n// Register live query to update UI\nlet liveQuery = ditto.store.collection("cars").find("color == \'red\'")\n  .observeLocal { cars, event in\n    // do something\n  }\n'))),(0,o.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'// --- Action somewhere in your application\n-(void) userDidInsertCar() {\n    [[ditto.store collection:@"cars"] insert:@{\n        @"model": @"Ford",\n        @"color": @"black"\n    }];\n}\n\n// Register live query to update UI\nDITLiveQuery *liveQuery = [[collection find:@"color == \'red\'"]\n    observeLocal:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\n\n    }\n}];\n'))),(0,o.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// --- Action somewhere in your application\nfun userDidInsertCar() {\n    ditto.store.collection("cars").insert(mapOf(\n        "model" to "Ford",\n        "color" to "black"\n    ))\n}\n\n// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars").\n    .findAll()\n    .observeLocal { docs, event ->\n    // Do something...\n}\n'))),(0,o.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// --- Action somewhere in your application\npublic void userDidInsertCar() {\n    Map<String, Object> content = new HashMap<>();\n    content.put("model", "Ford");\n    content.put("color", "black");\n    ditto.store.collection("cars").insert(content);\n}\n\n// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars")\n    .findAll()\n    .observe((docs, event) -> {\n        // Do something...\n    });\n'))),(0,o.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// --- Action somewhere in your application\n// --- Action somewhere in your application\nvoid user_did_insert_car()\n{\n    var carsDocument = new Dictionary<string, object>\n    {\n        { "model", "Ford" },\n        { "color", "black" }\n    };\n    ditto.Store.Collection("cars").Insert(carsDocument);\n}\n\n// --- Register live query to update UI\nvar localLiveQuery = ditto.Store.Collection("cars").Find("color == \'red\'").ObserveLocal((docs, DittoLiveQueryEvent) =>\n{\n    // Do something...\n});\n'))),(0,o.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'// --- Action somewhere in your application\nvoid user_did_insert_car() {\n    ditto.tore.collection("cars").insert({\n        {"model", "Ford"},\n        {"color", "black"}\n    });\n}\n\n// --- Register live query to update UI\nstd::shared_ptr<LiveQuery> query = collection\n  .find("color == \'red\'")\n  .observe_local(LiveQueryEventHandler{\n    [&](std::vector<Document> docs, LiveQueryEvent event) {\n      \n    }});\n')))),(0,o.kt)("p",null,"Note: if your ditto instance has not called ",(0,o.kt)("inlineCode",{parentName:"p"},"tryStartSync"),", there will be no difference between ",(0,o.kt)("inlineCode",{parentName:"p"},".observe")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".observeLocal"),"."))}v.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);